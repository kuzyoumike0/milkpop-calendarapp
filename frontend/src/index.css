// frontend/src/components/RegisterPage.jsx
import React, { useState } from "react";
import { Calendar, momentLocalizer } from "react-big-calendar";
import moment from "moment";
import "moment/locale/ja";
import "react-big-calendar/lib/css/react-big-calendar.css";
import Holidays from "date-holidays";

moment.locale("ja");
const localizer = momentLocalizer(moment);
const hd = new Holidays("JP");

const RegisterPage = () => {
  const [title, setTitle] = useState("");
  const [selectedDates, setSelectedDates] = useState([]);
  const [rangeStart, setRangeStart] = useState(null);
  const [selectionMode, setSelectionMode] = useState("multi"); // "multi" or "range"
  const [dateOptions, setDateOptions] = useState({}); // 日付ごとの区分・時間

  // 日付クリック処理
  const handleDayClick = (date) => {
    const day = moment(date).startOf("day").toDate();

    if (selectionMode === "multi") {
      if (selectedDates.some((d) => moment(d).isSame(day, "day"))) {
        setSelectedDates(selectedDates.filter((d) => !moment(d).isSame(day, "day")));
      } else {
        setSelectedDates([...selectedDates, day]);
      }
    }

    if (selectionMode === "range") {
      if (!rangeStart) {
        // 開始クリック
        setRangeStart(day);
        setSelectedDates([day]); // 開始日は強調表示
      } else {
        // 終了クリック
        let start = moment(rangeStart);
        let end = moment(day);
        if (end.isBefore(start)) {
          [start, end] = [end, start]; // 逆順なら入れ替え
        }
        const days = [];
        const current = start.clone();
        while (current.isSameOrBefore(end, "day")) {
          days.push(current.toDate());
          current.add(1, "day");
        }
        setSelectedDates(days);
        setRangeStart(null);
      }
    }
  };

  // 区分変更
  const handleOptionChange = (date, field, value) => {
    setDateOptions((prev) => ({
      ...prev,
      [date]: {
        ...prev[date],
        [field]: value,
      },
    }));
  };

  // 祝日スタイル
  const dayPropGetter = (date) => {
    const holiday = hd.isHoliday(date);
    const isSelected = selectedDates.some((d) => moment(d).isSame(date, "day"));
    let className = "";
    let style = {};

    if (holiday) {
      className = "holiday";
      style = { background: "rgba(253,185,200,0.2)", color: "red" };
    }
    if (isSelected) {
      className += " selected-day";
    }
    return { className, style };
  };

  const handleSubmit = () => {
    alert(
      JSON.stringify(
        {
          title,
          dates: selectedDates,
          options: dateOptions,
        },
        null,
        2
      )
    );
  };

  return (
    <div className="page-card">
      <h2>日程登録ページ</h2>

      <div className="form-group">
        <label>タイトル</label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="イベントタイトルを入力"
        />
      </div>

      {/* モード切替 */}
      <div className="form-group">
        <label>選択モード</label>
        <label>
          <input
            type="radio"
            value="multi"
            checked={selectionMode === "multi"}
            onChange={() => {
              setSelectionMode("multi");
              setSelectedDates([]);
              setRangeStart(null);
            }}
          />
          複数選択
        </label>
        <label style={{ marginLeft: "1rem" }}>
          <input
            type="radio"
            value="range"
            checked={selectionMode === "range"}
            onChange={() => {
              setSelectionMode("range");
              setSelectedDates([]);
              setRangeStart(null);
            }}
          />
          範囲選択
        </label>
      </div>

      {/* カレンダー */}
      <Calendar
        localizer={localizer}
        views={["month"]}
        selectable
        style={{ height: 500 }}
        dayPropGetter={dayPropGetter}
        onSelectSlot={({ start }) => handleDayClick(start)}
      />

      {/* 選択日リスト */}
      <div className="form-group">
        <h3>選択された日程</h3>
        {selectedDates.length === 0 && <p>日程が選択されていません</p>}
        {selectedDates.map((date, idx) => {
          const key = moment(date).format("YYYY-MM-DD");
          const option = dateOptions[key] || { type: "終日", start: "", end: "" };

          return (
            <div key={idx} style={{ marginBottom: "0.5rem" }}>
              <strong>{moment(date).format("YYYY年MM月DD日")}</strong>{" "}
              <select
                value={option.type}
                onChange={(e) => handleOptionChange(key, "type", e.target.value)}
              >
                <option value="終日">終日</option>
                <option value="昼">昼</option>
                <option value="夜">夜</option>
                <option value="時間指定">時間指定</option>
              </select>
              {option.type === "時間指定" && (
                <>
                  <select
                    value={option.start}
                    onChange={(e) => handleOptionChange(key, "start", e.target.value)}
                  >
                    <option value="">開始時刻</option>
                    {Array.from({ length: 24 }).map((_, i) => (
                      <option key={i} value={i}>
                        {i}時
                      </option>
                    ))}
                  </select>
                  <span> ~ </span>
                  <select
                    value={option.end}
                    onChange={(e) => handleOptionChange(key, "end", e.target.value)}
                  >
                    <option value="">終了時刻</option>
                    {Array.from({ length: 24 }).map((_, i) => (
                      <option key={i} value={i}>
                        {i}時
                      </option>
                    ))}
                  </select>
                </>
              )}
            </div>
          );
        })}
      </div>

      <button onClick={handleSubmit}>登録</button>
    </div>
  );
};

export default RegisterPage;
