// frontend/src/components/RegisterPage.jsx
import React, { useState } from "react";
import { Calendar, momentLocalizer } from "react-big-calendar";
import moment from "moment";
import "moment/locale/ja";
import "../index.css";

const localizer = momentLocalizer(moment);

const RegisterPage = () => {
  const [title, setTitle] = useState("");
  const [events, setEvents] = useState([]);
  const [selectedSlots, setSelectedSlots] = useState([]);
  const [shareUrl, setShareUrl] = useState("");

  // 選択モード
  const [selectMode, setSelectMode] = useState("multiple");
  const [rangeStart, setRangeStart] = useState(null);

  // 祝日データ
  const holidays = {
    "2025-01-01": "元日",
    "2025-02-11": "建国記念の日",
    "2025-02-23": "天皇誕生日",
    "2025-04-29": "昭和の日",
    "2025-05-03": "憲法記念日",
    "2025-05-04": "みどりの日",
    "2025-05-05": "こどもの日",
    "2025-08-11": "山の日",
  };

  // 時刻プルダウン
  const times = Array.from({ length: 24 }, (_, i) =>
    `${String(i).padStart(2, "0")}:00`
  );

  // 日付クリック処理
  const handleSelectDay = (date) => {
    if (selectMode === "multiple") {
      setSelectedSlots((prev) => [
        ...prev,
        {
          start: date,
          end: date,
          division: "allday",
          startTime: "09:00",
          endTime: "10:00",
        },
      ]);
    } else if (selectMode === "range") {
      if (!rangeStart) {
        setRangeStart(date);
      } else {
        const start = moment.min(moment(rangeStart), moment(date)).toDate();
        const end = moment.max(moment(rangeStart), moment(date)).toDate();
        setSelectedSlots((prev) => [
          ...prev,
          { start, end, division: "allday", startTime: "09:00", endTime: "10:00" },
        ]);
        setRangeStart(null);
      }
    }
  };

  // イベント登録処理
  const handleAddEvent = () => {
    if (!title || selectedSlots.length === 0) return;

    const newEvents = selectedSlots.map((slot) => {
      let start = slot.start;
      let end = slot.end;

      if (slot.division === "custom") {
        const dateStr = moment(start).format("YYYY-MM-DD");
        start = moment(`${dateStr} ${slot.startTime}`, "YYYY-MM-DD HH:mm").toDate();
        end = moment(`${dateStr} ${slot.endTime}`, "YYYY-MM-DD HH:mm").toDate();
      }

      return {
        title: `${title} (${formatTimeRange(slot)})`,
        start,
        end,
        allDay: slot.division === "allday",
      };
    });

    setEvents((prev) => [...prev, ...newEvents]);
    setSelectedSlots([]);
    setTitle("");
    setShareUrl(`${window.location.origin}/share/${Date.now()}`);
  };

  // 区分の表示用ラベル
  const formatTimeRange = (slot) => {
    switch (slot.division) {
      case "allday":
        return "終日";
      case "day":
        return "昼";
      case "night":
        return "夜";
      case "custom":
        return `${slot.startTime} - ${slot.endTime}`;
      default:
        return "";
    }
  };

  // 日付セルの見た目
  const dayPropGetter = (date) => {
    const dateStr = moment(date).format("YYYY-MM-DD");

    // 祝日
    if (holidays[dateStr]) {
      return {
        className: "holiday",
        "data-holiday": holidays[dateStr],
        onClick: () => handleSelectDay(date),
      };
    }

    // 選択済みセル
    const isSelected = selectedSlots.some(
      (slot) =>
        moment(date).isSameOrAfter(moment(slot.start), "day") &&
        moment(date).isSameOrBefore(moment(slot.end), "day")
    );

    if (isSelected) {
      return { className: "selected-day", onClick: () => handleSelectDay(date) };
    }

    // 範囲選択中の開始日
    if (rangeStart && moment(date).isSame(rangeStart, "day")) {
      return { className: "selected-day", onClick: () => handleSelectDay(date) };
    }

    return { onClick: () => handleSelectDay(date) };
  };

  return (
    <div
      className="page-card"
      style={{
        background:
          "linear-gradient(135deg, rgba(253,185,200,0.15), rgba(0,76,160,0.15))",
      }}
    >
      <h2 style={{ color: "#FDB9C8", marginBottom: "1rem" }}>日程登録ページ</h2>

      {/* タイトル入力 */}
      <div className="form-group">
        <label>タイトル</label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="イベントタイトルを入力"
        />
      </div>

      {/* 選択モード切替 */}
      <div className="form-group">
        <label>日付選択モード</label>
        <div>
          <label>
            <input
              type="radio"
              value="multiple"
              checked={selectMode === "multiple"}
              onChange={(e) => setSelectMode(e.target.value)}
            />
            複数選択
          </label>
          <label style={{ marginLeft: "1rem" }}>
            <input
              type="radio"
              value="range"
              checked={selectMode === "range"}
              onChange={(e) => setSelectMode(e.target.value)}
            />
            範囲選択
          </label>
        </div>
      </div>

      {/* カレンダー */}
      <div style={{ height: "500px", marginBottom: "1rem" }}>
        <Calendar
          localizer={localizer}
          events={events}
          selectable={false}
          startAccessor="start"
          endAccessor="end"
          style={{ height: "100%" }}
          dayPropGetter={dayPropGetter}
          views={["month"]}
        />
      </div>

      {/* 選択済み日付ごとの設定 */}
      {selectedSlots.length > 0 && (
        <div style={{ marginTop: "1.5rem" }}>
          <h3 style={{ color: "#FDB9C8" }}>選択中の日程</h3>
          {selectedSlots.map((slot, idx) => (
            <div
              key={idx}
              style={{
                marginBottom: "1rem",
                padding: "0.5rem",
                border: "1px solid #444",
                borderRadius: "8px",
                background: "rgba(255,255,255,0.05)",
              }}
            >
              <p>
                {moment(slot.start).format("MM/DD")} -{" "}
                {moment(slot.end).format("MM/DD")}
              </p>
              <label>区分</label>
              <select
                value={slot.division}
                onChange={(e) => {
                  const newSlots = [...selectedSlots];
                  newSlots[idx].division = e.target.value;
                  setSelectedSlots(newSlots);
                }}
              >
                <option value="allday">終日</option>
                <option value="day">昼</option>
                <option value="night">夜</option>
                <option value="custom">時間帯</option>
              </select>

              {/* 時間帯の場合のみ */}
              {slot.division === "custom" && (
                <div style={{ display: "flex", gap: "1rem", marginTop: "0.5rem" }}>
                  <div>
                    <label>開始</label>
                    <select
                      value={slot.startTime}
                      onChange={(e) => {
                        const newSlots = [...selectedSlots];
                        newSlots[idx].startTime = e.target.value;
                        if (
                          moment(e.target.value, "HH:mm").isSameOrAfter(
                            moment(newSlots[idx].endTime, "HH:mm")
                          )
                        ) {
                          const i = times.indexOf(e.target.value);
                          if (i < times.length - 1) {
                            newSlots[idx].endTime = times[i + 1];
                          }
                        }
                        setSelectedSlots(newSlots);
                      }}
                    >
                      {times.map((t) => (
                        <option key={t} value={t}>
                          {t}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label>終了</label>
                    <select
                      value={slot.endTime}
                      onChange={(e) => {
                        const newSlots = [...selectedSlots];
                        newSlots[idx].endTime = e.target.value;
                        setSelectedSlots(newSlots);
                      }}
                    >
                      {times
                        .filter((t) =>
                          moment(t, "HH:mm").isAfter(moment(slot.startTime, "HH:mm"))
                        )
                        .map((t) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                    </select>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {/* 登録ボタン */}
      <div style={{ textAlign: "center", marginTop: "2rem" }}>
        <button
          onClick={handleAddEvent}
          style={{
            fontSize: "1.2rem",
            padding: "0.8rem 2rem",
            borderRadius: "12px",
            background: "linear-gradient(90deg, #FDB9C8, #004CA0)",
            border: "none",
            color: "#fff",
            fontWeight: "bold",
            cursor: "pointer",
            transition: "0.3s",
            boxShadow: "0 4px 12px rgba(0,0,0,0.4)",
          }}
          onMouseOver={(e) =>
            (e.currentTarget.style.transform = "scale(1.05)")
          }
          onMouseOut={(e) =>
            (e.currentTarget.style.transform = "scale(1.0)")
          }
        >
          ＋ 日程を登録
        </button>
      </div>

      {/* 登録済みリスト */}
      <div style={{ marginTop: "2rem" }}>
        <h3 style={{ color: "#FDB9C8" }}>登録済み日程</h3>
        <ul>
          {events.map((ev, idx) => (
            <li key={idx}>
              {ev.title} ({moment(ev.start).format("MM/DD")} -{" "}
              {moment(ev.end).format("MM/DD")})
            </li>
          ))}
        </ul>
      </div>

      {/* 共有リンク */}
      {shareUrl && (
        <div style={{ marginTop: "1.5rem" }}>
          <h3 style={{ color: "#FDB9C8" }}>共有リンク</h3>
          <a href={shareUrl} target="_blank" rel="noopener noreferrer">
            {shareUrl}
          </a>
        </div>
      )}
    </div>
  );
};

export default RegisterPage;
