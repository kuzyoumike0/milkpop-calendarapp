import React, { useEffect, useMemo, useState } from 'react'
import UniversalCalendar from '../components/UniversalCalendar.jsx'
function addDays(iso, n){ const dt=new Date(iso+'T00:00:00'); dt.setDate(dt.getDate()+n); const y=dt.getFullYear(); const m=String(dt.getMonth()+1).padStart(2,'0'); const d=String(dt.getDate()).padStart(2,'0'); return `${y}-${m}-${d}`}
const rangeDates=(s,e)=>{ const out=[]; let cur=s; const end=e||s; while(cur<=end){out.push(cur); cur=addDays(cur,1)} return out }
export default function Personal(){
  const [items,setItems]=useState([]); const [title,setTitle]=useState(''); const [memo,setMemo]=useState(''); const [timeSlot,setTimeSlot]=useState('全日')
  const t=new Date(); const [y,setY]=useState(t.getFullYear()); const [m,setM]=useState(t.getMonth()+1); const today=new Date().toISOString().slice(0,10); const [range,setRange]=useState({start:today,end:today})
  const fetchData = async()=>{ const r=await fetch('/api/personal'); setItems(await r.json()) }
  useEffect(()=>{ fetchData() }, [])
  const map = useMemo(()=>{ const mp={}; for(const ev of items){ (mp[ev.date] ||= []).push(ev) } return mp },[items])
  const add = async (e)=>{ e.preventDefault(); const dates=rangeDates(range.start, range.end); for(const d of dates){ await fetch('/api/personal',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title, memo, date:d, time_slot:timeSlot})}) } setTitle(''); setMemo(''); setTimeSlot('全日'); fetchData() }
  const del = async (id)=>{ await fetch('/api/personal/'+id,{method:'DELETE'}); fetchData() }
  const renderDay = (iso)=>{ if(!iso) return ''; const day=Number(iso.slice(-2)); const list=map[iso]||[]; return (<div style={{display:'grid',gridTemplateRows:'auto auto',placeItems:'center',gap:4}}><div style={{fontWeight:700}}>{day}</div><div style={{display:'inline-flex',gap:4}}>{list.slice(0,3).map((ev,i)=>(<span key={ev.id||i} className="badge" title={`${ev.title} [${ev.time_slot}]`} style={{background: ev.time_slot==='全日' ? '#22d3ee' : ev.time_slot==='昼' ? '#34d399' : '#f472b6'}} />))}{list.length>3 ? <span style={{fontSize:10,opacity:.8}}>+{list.length-3}</span>:null}</div></div>)}
  const prev=()=>{ const nm=m-1; if(nm<1){setM(12); setY(y-1)} else setM(nm) }; const next=()=>{ const nm=m+1; if(nm>12){setM(1); setY(y+1)} else setM(nm) }
  return (<section className="card"><h2>個人スケジュール</h2><div className="row" style={{alignItems:'flex-start'}}><div style={{flex:'0 0 420px'}}><UniversalCalendar mode="range" year={y} month={m} range={range} onRangeChange={setRange} onPrev={prev} onNext={next} renderDay={renderDay}/><div className="row" style={{marginTop:8}}><button className="button ghost" onClick={()=> setRange({start:today,end:today})}>今日</button><button className="button ghost" onClick={()=> setRange(r=>({start:r.start,end:null}))}>単日</button></div></div><form onSubmit={add} style={{flex:1}}><div className="card" style={{marginTop:0}}><div className="row" style={{marginBottom:10}}><input className="input" style={{flex:1}} placeholder="タイトル" value={title} onChange={e=>setTitle(e.target.value)} required /><select className="select" value={timeSlot} onChange={e=>setTimeSlot(e.target.value)}><option>全日</option><option>昼</option><option>夜</option></select></div><div style={{marginBottom:10}}><div style={{color:'#9aa0b4',fontSize:12,marginBottom:4}}>メモ</div><textarea className="input" rows={3} placeholder="補足を入力" value={memo} onChange={e=>setMemo(e.target.value)} style={{width:'100%'}}/></div><div className="row"><input className="input" readOnly value={range.end? `${range.start} 〜 ${range.end}`: range.start} style={{flex:1}}/><button className="button" type="submit">{range.end && range.start!==range.end ? '範囲一括追加' : '追加'}</button></div></div></form></div><h3 style={{marginTop:16}}>あなたの予定</h3><ul className="list">{items.map(it=> (<li key={it.id} className="item"><strong>{it.date}</strong> [{it.time_slot}] {it.title}{it.memo ? <em style={{marginLeft:8,color:'#9aa0b4'}}>— {it.memo}</em> : null}<button className="button" style={{marginLeft:'auto'}} onClick={()=>del(it.id)}>削除</button></li>))}</ul></section>)}
