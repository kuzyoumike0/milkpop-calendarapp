import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import axios from "axios";

export default function ShareLinkPage() {
  const { linkId } = useParams();
  const [username, setUsername] = useState("");
  const [date, setDate] = useState("");
  const [timeslot, setTimeslot] = useState("ÁµÇÊó•");
  const [comment, setComment] = useState("");
  const [token, setToken] = useState(""); // üîë „Éë„Çπ„ÉØ„Éº„ÉâÔºà„Éà„Éº„ÇØ„É≥Ôºâ
  const [schedules, setSchedules] = useState([]);
  const [editId, setEditId] = useState(null);

  // ‰ªäÊó•„ÅÆÊó•‰ªò„Çí„Éá„Éï„Ç©„É´„Éà„Å´Ë®≠ÂÆö
  useEffect(() => {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, "0");
    const dd = String(today.getDate()).padStart(2, "0");
    setDate(`${yyyy}-${mm}-${dd}`);
  }, []);

  // „Çπ„Ç±„Ç∏„É•„Éº„É´ÂèñÂæó
  const fetchSchedules = async () => {
    try {
      const res = await axios.get(`/api/share/${linkId}`);
      setSchedules(res.data);
    } catch (err) {
      console.error("‰∫àÂÆöÂèñÂæóÂ§±Êïó:", err);
    }
  };

  useEffect(() => {
    fetchSchedules();
  }, [linkId]);

  // ÁôªÈå≤ or Êõ¥Êñ∞
  const handleRegister = async () => {
    if (!username.trim() || !token.trim()) {
      alert("ÂêçÂâç„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
      return;
    }

    try {
      if (editId) {
        // Êõ¥Êñ∞
        await axios.put(`/api/schedule/${editId}`, {
          username,
          date,
          timeslot,
          comment,
          token,
        });
      } else {
        // Êñ∞Ë¶èÁôªÈå≤
        await axios.post(`/api/share/${linkId}`, {
          username,
          date,
          timeslot,
          comment,
          token,
        });
      }

      // ÂÖ•ÂäõÊ¨Ñ„É™„Çª„ÉÉ„Éà
      setEditId(null);
      setTimeslot("ÁµÇÊó•");
      setComment("");
      fetchSchedules();
    } catch (err) {
      alert(err.response?.data?.error || "ÁôªÈå≤/Êõ¥Êñ∞Â§±Êïó");
      console.error("ÁôªÈå≤/Êõ¥Êñ∞Â§±Êïó:", err);
    }
  };

  // ÂâäÈô§
  const handleDelete = async (id) => {
    if (!window.confirm("„Åì„ÅÆ‰∫àÂÆö„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü")) return;
    try {
      await axios.delete(`/api/schedule/${id}`, { params: { token } });
      fetchSchedules();
    } catch (err) {
      alert(err.response?.data?.error || "ÂâäÈô§Â§±Êïó");
      console.error("ÂâäÈô§Â§±Êïó:", err);
    }
  };

  // Á∑®ÈõÜ„É¢„Éº„ÉâÈñãÂßã
  const handleEdit = (schedule) => {
    setEditId(schedule.id);
    setUsername(schedule.username);
    setDate(schedule.date);
    setTimeslot(schedule.timeslot);
    setComment(schedule.comment || "");
  };

  // Êó•‰ªò„ÇíÊó•Êú¨Ë™û„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å´Â§âÊèõ
  const formatJapaneseDate = (isoDate) => {
    const d = new Date(isoDate + "T00:00:00");
    const options = { month: "numeric", day: "numeric", weekday: "short" };
    return d.toLocaleDateString("ja-JP", options);
  };

  // Êó•‰ªò„Åî„Å®„Å´„Ç∞„É´„Éº„ÉóÂåñ
  const grouped = schedules.reduce((acc, s) => {
    if (!acc[s.date]) acc[s.date] = [];
    acc[s.date].push(s);
    return acc;
  }, {});

  return (
    <div className="p-4 font-sans">
      <h2 className="text-xl font-bold mb-4">ÂÖ±Êúâ„Çπ„Ç±„Ç∏„É•„Éº„É´</h2>

      {/* ÂÖ•Âäõ„Éï„Ç©„Éº„É† */}
      <div className="flex flex-col md:flex-row gap-2 mb-4">
        <input
          type="text"
          placeholder="ÂêçÂâç"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="border p-2 rounded flex-1"
        />
        <input
          type="password"
          placeholder="„Éë„Çπ„ÉØ„Éº„Éâ"
          value={token}
          onChange={(e) => setToken(e.target.value)}
          className="border p-2 rounded"
        />
        <input
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          className="border p-2 rounded"
        />
        <select
          value={timeslot}
          onChange={(e) => setTimeslot(e.target.value)}
          className="border p-2 rounded"
        >
          <option value="ÁµÇÊó•">ÁµÇÊó•</option>
          <option value="Êòº">Êòº</option>
          <option value="Â§ú">Â§ú</option>
        </select>
        <input
          type="text"
          placeholder="„Ç≥„É°„É≥„Éà (‰ªªÊÑè)"
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          className="border p-2 rounded flex-1"
        />
        <button
          onClick={handleRegister}
          className={`${
            editId ? "bg-green-500" : "bg-blue-500"
          } text-white px-4 py-2 rounded`}
        >
          {editId ? "Êõ¥Êñ∞" : "ÁôªÈå≤"}
        </button>
        {editId && (
          <button
            onClick={() => {
              setEditId(null);
              setTimeslot("ÁµÇÊó•");
              setComment("");
            }}
            className="bg-gray-400 text-white px-4 py-2 rounded"
          >
            „Ç≠„É£„É≥„Çª„É´
          </button>
        )}
      </div>

      {/* „Çπ„Ç±„Ç∏„É•„Éº„É´‰∏ÄË¶ß */}
      {Object.keys(grouped).length === 0 ? (
        <p>„Åæ„Å†‰∫àÂÆö„ÅØÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ</p>
      ) : (
        Object.keys(grouped)
          .sort()
          .map((d) => (
            <div key={d} className="mb-6">
              <h3 className="text-lg font-semibold mb-2">
                {formatJapaneseDate(d)}
              </h3>

              {/* PCË°®Á§∫: „ÉÜ„Éº„Éñ„É´ */}
              <table className="hidden md:table w-full border-collapse border">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="border p-2">ÂêçÂâç</th>
                    <th className="border p-2">ÊôÇÈñìÂ∏Ø</th>
                    <th className="border p-2">„Ç≥„É°„É≥„Éà</th>
                    <th className="border p-2">Êìç‰Ωú</th>
                  </tr>
                </thead>
                <tbody>
                  {grouped[d].map((s) => (
                    <tr key={s.id}>
                      <td className="border p-2">{s.username}</td>
                      <td className="border p-2">{s.timeslot}</td>
                      <td className="border p-2">{s.comment || "-"}</td>
                      <td className="border p-2 space-x-2">
                        {s.username === username && (
                          <>
                            <button
                              onClick={() => handleEdit(s)}
                              className="bg-yellow-500 text-white px-2 py-1 rounded"
                            >
                              Á∑®ÈõÜ
                            </button>
                            <button
                              onClick={() => handleDelete(s.id)}
                              className="bg-red-500 text-white px-2 py-1 rounded"
                            >
                              ÂâäÈô§
                            </button>
                          </>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              {/* „É¢„Éê„Ç§„É´Ë°®Á§∫: „Ç´„Éº„Éâ */}
              <div className="md:hidden">
                {grouped[d].map((s) => (
                  <div
                    key={s.id}
                    className="border rounded p-3 mb-2 shadow-sm bg-white"
                  >
                    <p>
                      <strong>ÂêçÂâç:</strong> {s.username}
                    </p>
                    <p>
                      <strong>ÊôÇÈñìÂ∏Ø:</strong> {s.timeslot}
                    </p>
                    <p>
                      <strong>„Ç≥„É°„É≥„Éà:</strong> {s.comment || "-"}
                    </p>
                    {s.username === username && (
                      <div className="flex gap-2 mt-2">
                        <button
                          onClick={() => handleEdit(s)}
                          className="bg-yellow-500 text-white px-3 py-1 rounded"
                        >
                          Á∑®ÈõÜ
                        </button>
                        <button
                          onClick={() => handleDelete(s.id)}
                          className="bg-red-500 text-white px-3 py-1 rounded"
                        >
                          ÂâäÈô§
                        </button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))
      )}
    </div>
  );
}
